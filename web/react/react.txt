context:

react中 context 属性可跨级传递;
通过对 contextTypes 检测的结果,选择性继承父类的context
react-dom部分源码
//该函数返回值为子类生成时函数所接收的context对象;
//currentContext为当前类(父)的context
_processChildContext: function (currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

	//当前类(父)中存在 getChildContext 函数,则通过 getChildContext 函数取得子类的 context 对象
    if (inst.getChildContext) {
      if (process.env.NODE_ENV !== 'production') {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }
	//通过 childContextTypes 对子类 context 进行检测,合并父子的 context 对象为子类的 context 对象;
    if (childContext) {
      !(typeof Component.childContextTypes === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().', this.getName() || 'ReactCompositeComponent') : _prodInvariant('107', this.getName() || 'ReactCompositeComponent') : void 0;
      if (process.env.NODE_ENV !== 'production') {
        this._checkContextTypes(Component.childContextTypes, childContext, 'child context');
      }
      for (var name in childContext) {
        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : _prodInvariant('108', this.getName() || 'ReactCompositeComponent', name) : void 0;
      }
      return _assign({}, currentContext, childContext);
    }
    return currentContext;
}

//该函数返回值为子类生成函数为子类赋值的 context 对象;
//context为子类生成时函数接收到的 context 对象
_processContext: function (context) {
    var maskedContext = this._maskContext(context);
    if (process.env.NODE_ENV !== 'production') {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
}
//根据类的 contextTypes 属性,选择获取 context 对象中的属性,生成新的context
_maskContext: function (context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
}









性能检测工具:
react-addons-perf
import Perf from 'react-addons-perf'

Perf.start()
Perf.stop()
start/stop这两个方法，放在你要测试性能的代码的两端，如果操作消耗一些时间，但是这些时间是微不足道的，会被直接忽略(所以在小型的项目中，这个工具可能并不会有结果)。

var measure=Perf.getLastMeasurements()
在stop函数调用，停止测试后，你需要用Perf.getLastMeasurements()去得到测试的结果。measure 为测试数据结果的结构体;

Perf.printInclusive(measure)
这个函数会打印测试的总时间以及一些相关信息，如果没有什么参数的话，函数会打印出所有的测试记录，它同时会在控制台直接以table的格式良好的进行显示(在console中用console.table()函数可以进行table格式的显示)

Perf.printExclusive(measure)
Exclusive单词的意思是独立，跟printInclusive有点类似，但是不会包括装载组件的时间：处理props，componentWillMount和componentDidMount这些东西的时间都不会算进去。

Perf.printWasted(measure)
这是Perf性能分析工具最有用的部分，”Wasted“浪费的时间：时间浪费在组件上但是又没有用于去更新组件。









